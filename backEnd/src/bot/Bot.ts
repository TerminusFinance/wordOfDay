import TelegramBot from 'node-telegram-bot-api';
import { botToken } from '../../confit';
import {connectDatabase} from "../bd";
import AcquisitionsService from "../service/AcquisitionsService";
export const myBot = new TelegramBot(botToken, { polling: true });


export const sendMessage = async (chatId: number, responseText: string, lnCode: string, inviteCode?: string) => {
    try {
        await myBot.sendMessage(chatId, responseText, {
            parse_mode: 'Markdown',
            reply_markup: getInlineMarkup(lnCode, inviteCode)
        });
    } catch (e) {
        console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:', e);
    }
};

const getInlineMarkup = (lnCode: string, inviteCode?: string) => {
    const playButton = {
        text: lnCode === 'ru' ? '–ò–≥—Ä–∞—Ç—å —Å–µ–π—á–∞—Å üí∞' : 'Play right now üí∞',
        web_app: { url: `https://shuriginadiana.net?inviteCode=${inviteCode || ''}` }
    };

    const subscribeButton = {
        text: lnCode === 'ru' ? '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª üîû' : 'Subscribe to chanel üîû',
        url: 'https://t.me/TerminusFinance'
    };

    const howToPlayButton = {
        text: lnCode === 'ru' ? '–ö–∞–∫ –∏–≥—Ä–∞—Ç—å ü´¶' : 'How to Play ü´¶',
        callback_data: lnCode === 'ru' ? 'how_to_play-ru' : 'how_to_play-en'
    };

    return {
        inline_keyboard: [
            [playButton],
            [subscribeButton],
            [howToPlayButton]
        ]
    };
};

export const sendInstructions = async (chatId: number, lnCode: string) => {
    const responseText = lnCode === 'ru' ? 'üçë –ö–∞–∫ –∏–≥—Ä–∞—Ç—å –≤ FapTap:\n' +
        '\n' +
        '‚ñ™Ô∏è –¢–∞–ø–∞–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π ‚Äî –∫–∞–∂–¥—ã–π —Ç–∞–ø –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –∫ —Ä–æ—Å–∫–æ—à–Ω–æ–π –∂–∏–∑–Ω–∏, —Å–æ–±–∏—Ä–∞–π –º–æ–Ω–µ—Ç–∫–∏ –∏ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–π –ø—Ä–∏–±—ã–ª—å.\n' +
        '\n' +
        '‚ñ™Ô∏è –í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è ‚Äî –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ —Å–æ—Ü—Å–µ—Ç–∏ –∏ –ø–æ–ª—É—á–∞–π –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.\n' +
        '\n' +
        '‚ñ™Ô∏è –ü—Ä–æ–∫–∞—á–∏–≤–∞–π –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–π –¥–æ—Ö–æ–¥ ‚Äî —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É–π –¥–µ–≤–æ—á–µ–∫ –∏ —Å–º–æ—Ç—Ä–∏, –∫–∞–∫ –ø—Ä–∏–±—ã–ª—å —Ä–∞—Å—Ç–µ—Ç.\n' +
        '\n' +
        '‚ñ™Ô∏è –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π ‚Äî –∑–æ–≤–∏ –¥—Ä—É–∑–µ–π –≤ –∂–µ–ª–∞–Ω–Ω—ã–π –º–∏—Ä —Å–æ–±–ª–∞–∑–Ω–æ–≤ –∏ –ø–æ–ª—É—á–∞–π –Ω–∞–≥—Ä–∞–¥—ã.\n' +
        '\n' +
        'üí∞ –õ–∏—Å—Ç–∏–Ω–≥ —Ç–æ–∫–µ–Ω–æ–≤ ‚Äî –≤ –∫–æ–Ω—Ü–µ —Å–µ–∑–æ–Ω–∞ –≤—ã–ø—É—Å—Ç–∏–º —Ç–æ–∫–µ–Ω –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏–º —Å—Ä–µ–¥–∏ –∏–≥—Ä–æ–∫–æ–≤. –î–∞—Ç–∞ –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª–µ.' : 'How to Play Instructions';
    await sendMessage(chatId, responseText, lnCode);
};



myBot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const code = msg.from?.language_code;

    if (msg.successful_payment) {
        await handleSuccessfulPayment(msg.successful_payment);
    } else {
        if (msg.text?.startsWith('/start')) {
            if (code) {
                await sendMessage(chatId, code === 'ru' ? '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FapTap üçë\n' +
                    '\n' +
                    '–°–æ–∑–¥–∞–π —Å–≤–æ—é –≤–µ–±–∫–∞–º-–∏–º–ø–µ—Ä–∏—é, —Ä–∞–∑–≤–∏–≤–∞–π –¥–µ–≤–æ—á–µ–∫ –∏ –ø—Ä–æ–∫–∞—á–∏–≤–∞–π –∫–∞—Ä—Ç–æ—á–∫–∏. –ü–æ—á—É–≤—Å—Ç–≤—É–π –≤ —Ä—É–∫–∞—Ö –≤–ª–∞—Å—Ç—å –ø–æ—Ä–æ—á–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –∏ —Å—Ç–∞–Ω—å ¬´–Ω–æ–º–µ—Ä–æ–º –æ–¥–∏–Ω¬ª –≤ —ç—Ç–æ–π –∏–≥—Ä–µ üîû \n' +
                    '\n' +
                    'üî• –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å.' : 'Welcome!', code);
            }
        } else if (msg.text?.startsWith('/howtoplay')) {
            if (code) {
                await sendInstructions(chatId, code);
            }
        } else {
            if (code) {
                await sendMessage(chatId, code === 'ru' ? '–û—à–∏–±–∫–∞' : 'Error', code);
            }
        }
    }
})

myBot.on('callback_query', async (callbackQuery) => {
    const message = callbackQuery.message;
    if (!message) return;

    const chatId = message.chat.id;
    const data = callbackQuery.data;

    if (data === 'how_to_play-ru') {
        await sendInstructions(chatId, 'ru');
    } else if (data === 'how_to_play-en') {
        await sendInstructions(chatId, 'en');
    }

    await myBot.answerCallbackQuery(callbackQuery.id);
});

myBot.on('pre_checkout_query', async (preCheckoutQuery) => {
    try {
        // –ó–¥–µ—Å—å –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã: pre_checkout_query_id –∏ ok (true)
        await myBot.answerPreCheckoutQuery(preCheckoutQuery.id, true);
        console.log('Pre-checkout query answered successfully');
    } catch (error) {
        console.error('Failed to answer pre-checkout query:', error);
    }
});


myBot.on('chat_join_request', async (chatJoinRequest) => {
    const chatId = chatJoinRequest.chat.id;
    const userId = chatJoinRequest.from?.id;

    try {
        if (userId) {
            await myBot.approveChatJoinRequest(chatId, userId);
            await sendMessage(userId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª!', 'ru');
        }
    } catch (e) {
        if (e instanceof Error) {
            console.error(`Failed to approve join request: ${e.message}`);
        } else {
            console.error(`Failed to approve join request: ${e}`);
        }
    }
});


const handleSuccessfulPayment = async (successfulPayment: any) => {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º userId –∏–∑ –ø–ª–∞—Ç–µ–∂–∞
    const userId = successfulPayment.telegram_payment_charge_id.split('_')[0]; // –ü—Ä–∏–º–µ—Ä —Ä–∞–∑–±–æ—Ä–∞ ID
    console.log(`User with ID ${userId} has made a successful payment`);
    console.log(`Payment details: ${JSON.stringify(successfulPayment)}`);

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const dbConnection = await connectDatabase()

    try {
        // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const acquisitionsController = new AcquisitionsService(dbConnection);

        // –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        const result = await acquisitionsController.subscriptionProcessing(
            successfulPayment.provider_payment_charge_id,
            successfulPayment.total_amount
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if (result === true) {
            console.log('Payment processed successfully');
        } else {
            console.log(`Payment processing error: ${result}`);
        }
    } catch (error) {
        console.error('Error processing payment:', error);
    } finally {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        await dbConnection.end();
    }
};


export default myBot;